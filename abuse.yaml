apiVersion: v1
kind: Namespace
metadata:
  name: garbage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: abuser
    namespace: garbage
---
  apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    namespace: garbage
    name: configmapcreator
  rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create", "get", "watch", "list"]
  ---
  apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: configmapcreatorBinding
    namespace: garbage
  subjects:
  - kind: ServiceAccount
    name: abuser
    namespace: garbage
  roleRef:
    kind: Role
    name: configmapcreator
    apiGroup: ""
    ---
  apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: azure-cns
    namespace: kube-system
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
      app: azure-cns
  spec:
    selector:
      matchLabels:
        k8s-app: azure-cns
    template:
      metadata:
        labels:
          k8s-app: azure-cns
        annotations:
          cluster-autoscaler.kubernetes.io/daemonset-pod: "true"
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.azure.com/cluster
                  operator: Exists
                - key: type
                  operator: NotIn
                  values:
                  - virtual-kubelet
                - key: beta.kubernetes.io/os
                  operator: In
                  values:
                  - linux
{{- if semverCompare ">=1.11.0" .Values.global.Versions.Kubernetes }}
        priorityClassName: system-node-critical
{{- end }}
        tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - operator: "Exists"
            effect: NoExecute
          - operator: "Exists"
            effect: NoSchedule
        containers:
          - name: cns-container
            image: "{{ template "mcr_repository_base" . }}/containernetworking/azure-cns:{{ default $AzureCNSImageTag .Values.global.Network.AzureCNSImageTag -}}"
            imagePullPolicy: IfNotPresent
            args: [ "-c", "tcp://$(CNSIpAddress):$(CNSPort)", "-t", "$(CNSLogTarget)", "-o", "$(CNSLogDir)"]
            resources:
              requests:
                cpu: "10m"
                memory: "250Mi"            
              limits:
                cpu: "40m"
                memory: "250Mi"                
            volumeMounts:
              - name: log
                mountPath: /var/log
              - name: cns-state
                mountPath: /var/lib/azure-network
              - name: cns-config
                mountPath: /etc/azure-cns
              - name: cni-bin
                mountPath: /opt/cni/bin
              - name: azure-vnet
                mountPath: /var/run/azure-vnet
              - name: cni-lock
                mountPath: /var/lock/azure-vnet
{{- if .Values.global.Network.AzureCNSInitializeFromCNIEnabled }}
              - name: legacy-cni-state
                mountPath: /var/run/azure-vnet.json
{{- end }}
            ports:
              - containerPort: 10090
            env:
              - name: CNSIpAddress
                value: "127.0.0.1"
              - name: CNSPort
                value: "10090"
              - name: CNSLogTarget
                value: "stdoutfile"
              - name: CNSLogDir
                value: /var/log
              - name: CNS_CONFIGURATION_PATH
                value: /etc/azure-cns/cns_config.json
              - name: NODENAME
                valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: spec.nodeName 
        hostNetwork: true
{{- if and .Values.global.PrivateLink.enabled .Values.global.PrivateLink.privateIP .Values.global.PrivateLink.enableHostAliases }}
{{ include "podspec.hostaliases" . | indent 8 }}
{{- end }}
        volumes:
          - name: log
            hostPath:
              path: /var/log/azure-cns
              type: DirectoryOrCreate
          - name: cns-state
            hostPath:
              path: /var/lib/azure-network
              type: DirectoryOrCreate
          - name: cni-bin
            hostPath:
              path: /opt/cni/bin
              type: Directory
          - name: azure-vnet
            hostPath:
              path: /var/run/azure-vnet
              type: DirectoryOrCreate
          - name: cni-lock
            hostPath:
              path: /var/lock/azure-vnet
              type: DirectoryOrCreate
{{- if .Values.global.Network.AzureCNSInitializeFromCNIEnabled }}
          - name: legacy-cni-state
            hostPath:
              path: /var/run/azure-vnet.json
              type: FileOrCreate
{{- end }}
          - name: cns-config
            configMap:
              name: cns-config
{{- if .Values.global.rbac.enabled }}
        serviceAccountName: azure-cns
{{- end }}
  ---
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: cns-config
    namespace: kube-system
    labels:
      addonmanager.kubernetes.io/mode: Reconcile
  data:
    cns_config.json: |
      {
        "TelemetrySettings": {
            "TelemetryBatchSizeBytes": 16384,
            "TelemetryBatchIntervalInSecs": 15,
            "RefreshIntervalInSecs": 15,
            "DisableAll": false,
            "HeartBeatIntervalInMins": 30,
            "DebugMode": false,
            "SnapshotIntervalInMins": 60
        },
        "ManagedSettings": {
            "PrivateEndpoint": "",
            "InfrastructureNetworkID": "",
            "NodeID": "",
            "NodeSyncIntervalInSeconds": 30
        },
        "ChannelMode": "CRD",
        "InitializeFromCNI": {{ .Values.global.Network.AzureCNSInitializeFromCNIEnabled }}
      }
